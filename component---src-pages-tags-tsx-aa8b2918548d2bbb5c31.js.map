{"version":3,"sources":["webpack:///(webpack)/buildin/module.js","webpack:///./src/components/PostList/index.tsx","webpack:///./src/pages/tags.tsx"],"names":["module","exports","webpackPolyfill","deprecate","paths","children","Object","defineProperty","enumerable","get","l","i","PostList","memo","props","posts","useState","showCnt","setShowCnt","throttleScrollHandler","useCallback","throttle","window","outerHeight","document","querySelector","getBoundingClientRect","bottom","prev","length","useEffect","addEventListener","removeEventListener","sort","a","b","af","node","frontmatter","bf","aDate","Date","update","includes","date","bDate","mapPost","map","post","excerpt","fields","slug","title","tags","Number","split","mapTag","tag","key","className","to","pageQuery","Tags","group","data","allMarkdownRemark","largeCount","setLargeCount","targetTag","setTargetTag","x","fieldValue","toLocaleLowerCase","y","tagList","g","fontSize","style","Math","round","totalCount","toString","opacity","fontWeight","onClick","href","large","location","hash","id","filter","edges"],"mappings":"oGAAAA,EAAOC,QAAU,SAASD,GAoBzB,OAnBKA,EAAOE,kBACXF,EAAOG,UAAY,aACnBH,EAAOI,MAAQ,GAEVJ,EAAOK,WAAUL,EAAOK,SAAW,IACxCC,OAAOC,eAAeP,EAAQ,SAAU,CACvCQ,YAAY,EACZC,IAAK,WACJ,OAAOT,EAAOU,KAGhBJ,OAAOC,eAAeP,EAAQ,KAAM,CACnCQ,YAAY,EACZC,IAAK,WACJ,OAAOT,EAAOW,KAGhBX,EAAOE,gBAAkB,GAEnBF,I,2DCpBR,wCAWMY,GAXN,UAWiBC,gBAAK,SAACC,GAAyB,IACtCC,EAAUD,EAAVC,MADsC,EAEhBC,mBAAS,IAAhCC,EAFuC,KAE9BC,EAF8B,KAIxCC,EAAwBC,sBAC5BC,oBAAS,WAELC,OAAOC,YAAeC,SAASC,cAAc,cAAiCC,wBAAwBC,QAEtGT,GAAW,SAACU,GACV,OAAIA,GAAQb,EAAMc,OAAeD,EAC1BA,EAAO,QAGjB,KACH,IAGFE,qBAAU,WAGR,OAFAR,OAAOS,iBAAiB,SAAUZ,GAE3B,WACLG,OAAOU,oBAAoB,SAAUb,MAEtC,IAEHJ,EAAMkB,MAAK,SAACC,EAAQC,GAClB,IAAMC,EAAKF,EAAEG,KAAKC,YACZC,EAAKJ,EAAEE,KAAKC,YAEZE,EAAQ,IAAIC,KAAKL,EAAGM,OAAOC,SAAS,QAAUP,EAAGQ,KAAOR,EAAGM,QAC3DG,EAAQ,IAAIJ,KAAKF,EAAGG,OAAOC,SAAS,QAAUJ,EAAGK,KAAOL,EAAGG,QAEjE,OAAIF,EAAQK,EAAc,EACtBL,EAAQK,GAAe,EACpB,KAGT,IAAMC,EAAU/B,EAAMgC,KAAI,SAACC,EAAWrC,GAAc,IAC1C0B,EAASW,EAATX,KACAY,EAAiCZ,EAAjCY,QAASC,EAAwBb,EAAxBa,OAAQZ,EAAgBD,EAAhBC,YACjBa,EAASD,EAATC,KACAP,EAAsBN,EAAtBM,KAAMQ,EAAgBd,EAAhBc,MAAOC,EAASf,EAATe,KACjBX,EAASJ,EAAYI,OACY,IAAjCY,OAAOZ,EAAOa,MAAM,KAAK,MAAWb,EAAS,MAEjD,IAAMc,EAASH,EAAKN,KAAI,SAACU,GACvB,GAAY,cAARA,EAEJ,OACE,uBAAKC,IAAQP,EAAL,IAAaM,EAAOE,UAAU,OACpC,4BACE,gBAAC,OAAD,CAAMC,GAAE,SAAWH,GAAnB,IAA+BA,QAMvC,OACE,sBAAIC,IAAKP,EAAMQ,UAAS,SAAUhD,EAAIM,EAAU,OAAS,SACvD,+BACE,sBAAI0C,UAAU,SACZ,gBAAC,OAAD,CAAMC,GAAIT,GAAOC,IAEnB,uBAAKO,UAAU,QACb,uBAAKA,UAAU,aACb,wBAAMA,UAAU,QAAQf,GACvBF,EAAS,wBAAMiB,UAAU,UAAhB,iBAA6CjB,EAA7C,KAAiE,MAE5EW,EAAKxB,QAAsB,cAAZwB,EAAK,GAAqB,wBAAMM,UAAU,YAAhB,KAAsC,KAChF,sBAAIA,UAAU,YAAYH,IAE5B,wBAAMG,UAAU,WACd,gBAAC,OAAD,CAAMC,GAAIT,GAAOF,SAM3B,OACE,uBAAKU,UAAU,aACb,0BAAKb,QAKIlC,O,q9BCpFf,IA2FaiD,EAAY,aAyBVC,UApHF,SAAChD,GAAyB,IAE7BiD,EADSjD,EAATkD,KACeC,kBAAfF,MAF6B,EAID/C,mBAAS,GAAtCkD,EAJ8B,KAIlBC,EAJkB,OAKHnD,mBAAS,aAApCoD,EAL8B,KAKnBC,EALmB,KAYrCN,EAAM9B,MAAK,SAACC,EAAcC,GACxB,IAAMmC,EAAIpC,EAAEqC,WAAWC,oBACjBC,EAAItC,EAAEoC,WAAWC,oBAEvB,OAAIF,EAAIG,GAAW,EACfA,EAAIH,EAAU,EACX,KAGT,IAAMI,EAAiBX,EAAMhB,KAAI,SAAC4B,GAChC,IACMC,EAKN,OACE,sBAAIlB,IAAKiB,EAAEJ,YACT,wBACEZ,UAAU,WACVkB,MAAO,CACLD,SAA2B,cAAjBD,EAAEJ,YAVdK,EAAWE,KAAKC,MAAM,IAAMb,EAAaS,EAAEK,aAAaC,WACxDL,EAAS/C,QAAU,IAAG+C,EAAW,IAAIA,GAC/BtB,OAAOsB,GAAY,IAAM,GAAnC,OAQ+D,SACzDM,QAASP,EAAEJ,aAAeH,EAAY,MAAQ,MAC9Ce,WAAYR,EAAEJ,aAAeH,EAAY,OAAS,UAEpDgB,QAAS,WACPf,EAAaM,EAAEJ,cAGjB,qBAAGc,KAAI,IAAMV,EAAEJ,YAAeI,EAAEJ,iBAMxCG,EAAQzC,MAAK,SAACC,GACZ,MAAc,cAAVA,EAAEwB,KAA6B,EAC5B,KA4BT,OAfA5B,qBAAU,WAER,IADA,IACA,EADIwD,EAAQ,EACZ,IAAgBvB,KAAhB,aAAuB,KAAZY,EAAY,QACA,cAAjBA,EAAEJ,YAA8BI,EAAEK,WAAaM,IAAOA,EAAQX,EAAEK,YAItE,OAFAb,EAAcmB,GAEP,eACN,CAACvB,IAEJjC,qBAAU,WAER,OADIyD,SAASC,MAAMnB,EAAakB,SAASC,KAAKjC,MAAM,KAAK,IAClD,eACN,IAGD,gBAAC,IAAD,KACE,gBAAC,IAAD,CAAKH,MAAM,SACX,uBAAKqC,GAAG,QACN,uBAAK9B,UAAU,iBACb,0BAAKe,IAGP,gBAAC,IAAD,CAAU3D,MAhCVgD,EAAM2B,QAAO,SAACf,GAAD,OAAkBA,EAAEJ,aAAeH,KAAWvC,OACtDkC,EAAM2B,QAAO,SAACf,GAAD,OAAkBA,EAAEJ,aAAeH,KAAW,GAAGuB,MAEnE5B,EAAM2B,QAAO,SAACf,GAAD,MAAmC,cAAjBA,EAAEJ,cAA4B1C,OACxDkC,EAAM2B,QAAO,SAACf,GAAD,MAAmC,cAAjBA,EAAEJ,cAA4B,GAAGoB,MAElE","file":"component---src-pages-tags-tsx-aa8b2918548d2bbb5c31.js","sourcesContent":["module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","import * as React from 'react';\r\nimport { memo, useEffect, useState, useCallback } from 'react';\r\nimport { Link } from 'gatsby';\r\nimport { throttle } from 'lodash';\r\n\r\nimport './postList.scss';\r\n\r\nexport interface PostListProps {\r\n  posts: any[];\r\n}\r\n\r\nconst PostList = memo((props: PostListProps) => {\r\n  const { posts } = props;\r\n  const [showCnt, setShowCnt] = useState(10);\r\n\r\n  const throttleScrollHandler = useCallback(\r\n    throttle(() => {\r\n      if (\r\n        window.outerHeight > (document.querySelector('.post-list') as HTMLDivElement).getBoundingClientRect().bottom\r\n      ) {\r\n        setShowCnt((prev: number) => {\r\n          if (prev >= posts.length) return prev;\r\n          return prev + 10;\r\n        });\r\n      }\r\n    }, 250),\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('scroll', throttleScrollHandler);\r\n\r\n    return () => {\r\n      window.removeEventListener('scroll', throttleScrollHandler);\r\n    };\r\n  }, []);\r\n\r\n  posts.sort((a: any, b: any) => {\r\n    const af = a.node.frontmatter;\r\n    const bf = b.node.frontmatter;\r\n\r\n    const aDate = new Date(af.update.includes('0001') ? af.date : af.update);\r\n    const bDate = new Date(bf.update.includes('0001') ? bf.date : bf.update);\r\n\r\n    if (aDate < bDate) return 1;\r\n    if (aDate > bDate) return -1;\r\n    return 0;\r\n  });\r\n\r\n  const mapPost = posts.map((post: any, i: number) => {\r\n    const { node } = post;\r\n    const { excerpt, fields, frontmatter } = node;\r\n    const { slug } = fields;\r\n    const { date, title, tags } = frontmatter;\r\n    let update = frontmatter.update;\r\n    if (Number(update.split(',')[1]) === 1) update = null;\r\n\r\n    const mapTag = tags.map((tag: string) => {\r\n      if (tag === 'undefined') return;\r\n\r\n      return (\r\n        <div key={`${slug}-${tag}`} className=\"tag\">\r\n          <span>\r\n            <Link to={`/tags#${tag}`}>{`#${tag}`}</Link>\r\n          </span>\r\n        </div>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <li key={slug} className={`post ${i < showCnt ? 'show' : 'hide'}`}>\r\n        <article>\r\n          <h2 className=\"title\">\r\n            <Link to={slug}>{title}</Link>\r\n          </h2>\r\n          <div className=\"info\">\r\n            <div className=\"date-wrap\">\r\n              <span className=\"date\">{date}</span>\r\n              {update ? <span className=\"update\">&nbsp;{`(Updated: ${update})`}</span> : null}\r\n            </div>\r\n            {tags.length && tags[0] !== 'undefined' ? <span className=\"info-dot\">Â·</span> : null}\r\n            <ul className=\"tag-list\">{mapTag}</ul>\r\n          </div>\r\n          <span className=\"excerpt\">\r\n            <Link to={slug}>{excerpt}</Link>\r\n          </span>\r\n        </article>\r\n      </li>\r\n    );\r\n  });\r\n  return (\r\n    <div className=\"post-list\">\r\n      <ul>{mapPost}</ul>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default PostList;\r\n","import * as React from 'react';\r\nimport { useEffect, useState } from 'react';\r\nimport { graphql } from 'gatsby';\r\n\r\nimport Layout from '../components/Layout';\r\nimport SEO from '../components/seo';\r\nimport './styles/tags.scss';\r\nimport PostList from '../components/PostList';\r\n\r\nexport interface TagsPageProps {\r\n  data: any;\r\n}\r\n\r\nconst Tags = (props: TagsPageProps) => {\r\n  const { data } = props;\r\n  const { group } = data.allMarkdownRemark;\r\n\r\n  const [largeCount, setLargeCount] = useState(0);\r\n  const [targetTag, setTargetTag] = useState('undefined');\r\n\r\n  interface groupItem {\r\n    fieldValue: string;\r\n    totalCount: number;\r\n  }\r\n\r\n  group.sort((a: groupItem, b: groupItem) => {\r\n    const x = a.fieldValue.toLocaleLowerCase();\r\n    const y = b.fieldValue.toLocaleLowerCase();\r\n\r\n    if (x < y) return -1;\r\n    if (y < x) return 1;\r\n    return 0;\r\n  });\r\n\r\n  const tagList: any[] = group.map((g: groupItem) => {\r\n    const getFontSize = () => {\r\n      let fontSize = Math.round(50 / (largeCount / g.totalCount)).toString();\r\n      if (fontSize.length <= 1) fontSize = `0${fontSize}`;\r\n      return `${Number(fontSize) / 100 + 0.9}rem`;\r\n    };\r\n\r\n    return (\r\n      <li key={g.fieldValue}>\r\n        <span\r\n          className=\"tag-text\"\r\n          style={{\r\n            fontSize: g.fieldValue !== 'undefined' ? getFontSize() : '0.9rem',\r\n            opacity: g.fieldValue === targetTag ? '0.9' : '0.5',\r\n            fontWeight: g.fieldValue === targetTag ? 'bold' : 'normal',\r\n          }}\r\n          onClick={() => {\r\n            setTargetTag(g.fieldValue);\r\n          }}\r\n        >\r\n          <a href={`#${g.fieldValue}`}>{g.fieldValue}</a>\r\n        </span>\r\n      </li>\r\n    );\r\n  });\r\n\r\n  tagList.sort((a: React.ReactElement) => {\r\n    if (a.key === 'undefined') return -1;\r\n    return 0;\r\n  });\r\n\r\n  const getPostList: () => any[] = () => {\r\n    if (group.filter((g: groupItem) => g.fieldValue === targetTag).length) {\r\n      return group.filter((g: groupItem) => g.fieldValue === targetTag)[0].edges;\r\n    }\r\n    if (group.filter((g: groupItem) => g.fieldValue === 'undefined').length) {\r\n      return group.filter((g: groupItem) => g.fieldValue === 'undefined')[0].edges;\r\n    }\r\n    return [];\r\n  };\r\n\r\n  useEffect(() => {\r\n    let large = 0;\r\n    for (const g of group) {\r\n      if (g.fieldValue !== 'undefined' && g.totalCount > large) large = g.totalCount;\r\n    }\r\n    setLargeCount(large);\r\n\r\n    return () => {};\r\n  }, [group]);\r\n\r\n  useEffect(() => {\r\n    if (location.hash) setTargetTag(location.hash.split('#')[1]);\r\n    return () => {};\r\n  }, []);\r\n\r\n  return (\r\n    <Layout>\r\n      <SEO title=\"Tags\" />\r\n      <div id=\"tags\">\r\n        <div className=\"tag-list-wrap\">\r\n          <ul>{tagList}</ul>\r\n        </div>\r\n\r\n        <PostList posts={getPostList()} />\r\n      </div>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport const pageQuery = graphql`\r\n  query {\r\n    allMarkdownRemark(sort: { fields: [frontmatter___date], order: DESC }) {\r\n      group(field: frontmatter___tags) {\r\n        fieldValue\r\n        totalCount\r\n        edges {\r\n          node {\r\n            excerpt(format: PLAIN)\r\n            fields {\r\n              slug\r\n            }\r\n            frontmatter {\r\n              date(formatString: \"MMM DD, YYYY\")\r\n              update(formatString: \"MMM DD, YYYY\")\r\n              title\r\n              tags\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport default Tags;\r\n"],"sourceRoot":""}